/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karmelos.ksimulator.view.swing;

import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.SwingUtilities;

/**
 *
 * @author MorpheuS
 */
public class SplashScreen extends javax.swing.JFrame {
    
    private Thread splashThreader;
    private SimView simView;

    /**
     * Creates new form SplashScreen
     */
    public SplashScreen() {
        try {
            this.setIconImage(ImageIO.read(this.getClass().getResource("/com/karmelos/ksimulator/2ndbaricon/kicon.png")));
            initComponents();
            simView = new SimView();  
            simView.setSize(Toolkit.getDefaultToolkit().getScreenSize());
            simView.setResizable(true);
           // simView.init();
            
            implementThread();
        } catch (IOException ex) {
            Logger.getLogger(SplashScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void paint(Graphics g) {
        try {
            super.paint(g);
            BufferedImage img = ImageIO.read(this.getClass().getResource("/com/karmelos/ksimulator/2ndbaricon/splashscreen.png"));
            
            g.drawImage(img, 0, 0, null);
            
        } catch (IOException ex) {
            Logger.getLogger(SplashScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    // ping server to check server availability
    public static boolean ping(String url, int timeout) {
    url = url.replaceFirst("https", "http"); // Otherwise an exception may be thrown on invalid SSL certificates.

    try {
        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);
        connection.setRequestMethod("HEAD");
        int responseCode = connection.getResponseCode();
        return (200 <= responseCode && responseCode <= 399);
    } catch (IOException exception) {
        return false;
    }
}
    private void implementThread() {
      //final String [] strng = {"MySQL Database","Dependencies", "Configuration Files","ModuleTypes","Modules","Components","Libraries","User Authenticator","Models","Images"};
        
        splashThreader = new Thread(new Runnable() {
            @Override
            public void run() {
                
                for (int i = 0; i <= 5; i++) {
                    
                    splashScreenProgressBar.setValue(i * 20);
                    //splashScreenProgressBar.setString(i*10 +"% Loaded" +" ||    "+ "\tLoading " +strng[i]);
                    if (i == 5) {
                        
                        simView.setVisible(true);
                        
                        SwingUtilities.windowForComponent(splashScreenProgressBar).setVisible(false);
                    }
                    
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException err) {
                    }
                    
                } //overridden  run method

            }
        });
        
        splashThreader.start();
        
    } //end implement thread method

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splashScreenProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(400, 200, 0, 0));
        setUndecorated(true);
        setResizable(false);

        splashScreenProgressBar.setForeground(new java.awt.Color(101, 106, 114));
        splashScreenProgressBar.setBorderPainted(false);
        splashScreenProgressBar.setString("");
        splashScreenProgressBar.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splashScreenProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 359, Short.MAX_VALUE)
                .addComponent(splashScreenProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar splashScreenProgressBar;
    // End of variables declaration//GEN-END:variables
}
