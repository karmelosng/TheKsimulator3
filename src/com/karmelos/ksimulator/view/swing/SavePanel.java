/*
-===` * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karmelos.ksimulator.view.swing;

import com.karmelos.ksimulator.jdialogs.OkCancelOption;
import com.karmelos.ksimulator.model.SimComponent;
import com.karmelos.ksimulator.model.SimLocationPointId;
import com.karmelos.ksimulator.model.SimPoint;
import com.karmelos.ksimulator.model.SimState;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author MorpheuS
 */
public class SavePanel extends javax.swing.JPanel {

    private String popStringStatus;
    private String rwStringStatus;
    private String saveFullPath;
    private SimView wrk;
    private Date convertedDate;
    private final Random temporaryStateID = new Random();
    /**
     * Creates new form SavePanel
     */
    public SavePanel() {
        try {
            Calendar cal = Calendar.getInstance();
            DateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String currtime = dateformat.format(cal.getTime());
            convertedDate = dateformat.parse(currtime);

        } catch (ParseException ex) {
            Logger.getLogger(SavePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    public SimView getWrk() {
        return wrk;
    }

    public void setWrk(SimView wrk) {
        this.wrk = wrk;
    }

    public String getSaveFullPath() {
        return saveFullPath;
    }

    public void setSaveFullPath(String saveFullPath) {
        this.saveFullPath = saveFullPath;
    }

    public String getPopStringStatus() {
        return popStringStatus;
    }

    public void setPopStringStatus(String popStringStatus) {
        this.popStringStatus = popStringStatus;
    }

    public String getRwStringStatus() {
        return rwStringStatus;
    }

    public void setRwStringStatus(String rwStringStatus) {
        this.rwStringStatus = rwStringStatus;
    }

    public JButton getContinueSaveButton() {
        return continueSaveButton;
    }

    public void setContinueSaveButton(JButton continueSaveButton) {
        this.continueSaveButton = continueSaveButton;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JComboBox getPopStatus() {
        return popStatus;
    }

    public void setPopStatus(JComboBox popStatus) {
        this.popStatus = popStatus;
    }

    public JComboBox getRwStatus() {
        return rwStatus;
    }

    public void setRwStatus(JComboBox rwStatus) {
        this.rwStatus = rwStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        popStatus = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        rwStatus = new javax.swing.JComboBox();
        continueSaveButton = new javax.swing.JButton();
        saveCancel = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/karmelos/ksimulator/2ndbaricon/savesmall.png"))); // NOI18N
        jLabel1.setText("Select Save Properties");

        jLabel2.setFont(jLabel3.getFont());
        jLabel2.setText("Global Acess Settings:");

        popStatus.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        popStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Public", "Private" }));

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel3.setText("Read or Write Access::");

        rwStatus.setFont(popStatus.getFont());
        rwStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Read Only", "Read and Write" }));

        continueSaveButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        continueSaveButton.setText("Continue");
        continueSaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                continueSaveButtonMouseClicked(evt);
            }
        });

        saveCancel.setFont(continueSaveButton.getFont());
        saveCancel.setText(" Cancel  ");
        saveCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(continueSaveButton)
                        .addGap(40, 40, 40)
                        .addComponent(saveCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(popStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(rwStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(popStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rwStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(continueSaveButton)
                    .addComponent(saveCancel))
                .addContainerGap(52, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void continueSaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_continueSaveButtonMouseClicked

        boolean popStats = true;
        boolean rwStats = false;
        int pop = popStatus.getSelectedIndex();
        int rw = rwStatus.getSelectedIndex();
      
        if (pop == 1) {
            popStats = false;
        } else if (rw == 1) {
            rwStats = true;
        }
     
//      int response = JOptionPane.showConfirmDialog(this, "Are You Sure of These Settings?", null, JOptionPane.OK_CANCEL_OPTION);
        
        OkCancelOption ok_c = new OkCancelOption(null, "KSimulator");
        ok_c.setLabel1("Are You Sure of These Settings?");
        ok_c.setSize(250, 100);
      boolean response = ok_c.showDialog();
        wrk.repaint();

        SimState stateLocal = wrk.getController().getState();
         Map<SimComponent,SimPoint> tempMap = stateLocal.getPlacedComponents();
        
        if (response) {
            wrk.getController().setSaved(true);
 
            // for fresh Save get all info first
            if (stateLocal != null && stateLocal.getId() == null &&
                    stateLocal.getPlacedComponents().size() > 0 &&wrk.getController().isFirstSave()) {
         
                // save State first temporary
                stateLocal.setGlobalAccessFlag(popStats);
                stateLocal.setReadWriteFlag(rwStats);
                stateLocal.setPlacedComponents(null);
                stateLocal.setSavedAt(convertedDate);
                 wrk.save();
                     wrk.getController().setSaved(true);
                  
               // create SimPoints and merge with that state id               
               SimState[] fetchSessions = wrk.getController().fetchSessions(false);              
               SimState lastSession;
               // get Single simstate for firsttimeuser               
               lastSession = fetchSessions[fetchSessions.length -1];             
                 Iterator<SimPoint> iterator = tempMap.values().iterator();
               Iterator<SimComponent> iteratorSim = tempMap.keySet().iterator();
                  while(iterator.hasNext()){
                      SimPoint s = iterator.next();
                    SimComponent next = iteratorSim.next();
                    SimLocationPointId simID = new SimLocationPointId();
                    simID.setComponentId(next.getId());
                    simID.setUserId(stateLocal.getSimUser().getUsername());
                    simID.setStateId(lastSession.getId());
                    
                    s.setSimPointLocId(simID);
                    getWrk().getController().saveObject(s);
                  }
                
                   stateLocal.setId(lastSession.getId());
                  stateLocal.setPlacedComponents(tempMap);
                    
                
              
             getWrk().getController().mergeObject(stateLocal);
             // change stuffs
              
                //exit save
                
                wrk.setOnSaveClear(true);
                wrk.getController().setDropOccured(false);
                wrk.getController().setFirstSave(false);
                 wrk.getController().afterFirstSaveReservoirCollector();
//                 wrk.getController().setSave(SimController.SaveState.Saved);
                // wrk.getController().setKeepOpen(rwStats);
                wrk.repaint();
                if(wrk.getController().isInstigClear()  ){
                  wrk.getController().instigateClear();
                }
                      
           

            }//end inner if
            
      else if ( stateLocal.getPlacedComponents().size() < 1) {
                // Means that Session Started but no selection of module type nad module has occured
//                JOptionPane.showMessageDialog(this, "You Cant Save this Empty Simulation! Select a module type First", null, JOptionPane.OK_CANCEL_OPTION);
//                 OkOption ok_cancel = new OkOption(null, "CAN'T SAVE"); 
      //  ok_c.setLabel1("You Cant Save this Empty Simulation! Select a module type First");
      //boolean resp = ok_c.showDialog();
        wrk.repaint();

            } 
//      else if(!getWrk().getController().isFirstSave()){
////            // save State first temporary
//               SimState newSimState= new SimState();
//               newSimState.setGlobalAccessFlag(stateLocal.getGlobalAccessFlag());
//                newSimState.setReadWriteFlag(stateLocal.getReadWriteFlag());
//                newSimState.setPlacedComponents(null);
//                newSimState.setAvailableComponents(stateLocal.getAvailableComponents());
//                newSimState.setSavedAt(convertedDate);
//                newSimState.setSimUser(stateLocal.getSimUser());
//                newSimState.setDescription("Dupicate of "+stateLocal.getId());
//             
//                 wrk.getController().saveObject(newSimState);
//           // Save SimPoints for them individually
//               SimState[] fetchSessions = wrk.getController().fetchSessions(false);              
//               SimState lastSession= fetchSessions[fetchSessions.length -1];
//               // get Single simstate for firsttimeuser  
//              
//               Iterator<SimPoint> iterator = tempMap.values().iterator();
//               Iterator<SimComponent> iteratorSim = tempMap.keySet().iterator();
//                  while(iterator.hasNext()){
//                      SimPoint s = iterator.next();
//                      // create Dummy SimPoint
//                     SimPoint sDummy = new SimPoint(s.getTopX(),s.getTopY());
//                    SimComponent next = iteratorSim.next();
//                    SimLocationPointId simID2 = new SimLocationPointId();
//                    simID2.setComponentId(next.getId());
//                    simID2.setUserId(lastSession.getSimUser().getUsername());
//                    simID2.setStateId(lastSession.getId());
//                    //initialize dummt SimPoints
//                    sDummy.setSimPointLocId(simID2);
//                    getWrk().getController().saveObject(sDummy);
//                  }
//                
//                
//                    
//                
//              
//             getWrk().getController().mergeObject(newSimState);
//         }
           

        }  // END OUTER IF HERE!!
        //Exit the Save Panel Anyways
        SwingUtilities.windowForComponent(this).setVisible(false);
    }//GEN-LAST:event_continueSaveButtonMouseClicked

    private void saveCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCancelActionPerformed
        SwingUtilities.getWindowAncestor(this).dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_saveCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueSaveButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox popStatus;
    private javax.swing.JComboBox rwStatus;
    private javax.swing.JButton saveCancel;
    // End of variables declaration//GEN-END:variables
}
