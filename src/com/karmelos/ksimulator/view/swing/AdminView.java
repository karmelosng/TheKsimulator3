package com.karmelos.ksimulator.view.swing;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import com.karmelos.ksimulator.controller.SimAdminController;
import com.karmelos.ksimulator.controller.SimController;
import com.karmelos.ksimulator.jdialogs.OkCancelOption;
import com.karmelos.ksimulator.jdialogs.OkOption;
import com.karmelos.ksimulator.model.SimComponent;
import com.karmelos.ksimulator.model.SimModule;
import com.karmelos.ksimulator.model.SimModuleType;
import com.karmelos.ksimulator.model.SimUser;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Ables
 */
public class AdminView extends javax.swing.JFrame {

    private List<SimComponent> componentFetchList;
    private SimComponent[] componentArray;
    private SimAdminController adminController;
    private SimController simController;
    private SimUser[] simUser;
    private SimModule[] simModule;
    private SimModuleType[] simModuleType;
    private SimComponent[] component;
    private boolean isvalidate;
    private boolean isSave;
    private byte[] iconByte;
    private byte[] wiredByte;
    private byte[] descByte;
    private byte[] solidByte;
    private File[] fileout;
    private byte[][] filebyte;
    private FileOutputStream[] outfile;
    
    private DefaultListModel listModel;

    public AdminView() {
        initComponents();
        try{
        setIconImage(ImageIO.read(this.getClass().getResource("/com/karmelos/ksimulator/2ndbaricon/kicon.png"))); }
        catch(IOException io){
            Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, io);
        }
        adminController = new SimAdminController();
        simUser = adminController.fetchSimUser();
        simModuleType = adminController.fetchModuleTypes();
        listModel = new DefaultListModel();
        for (int i = 0; i < simUser.length; i++) {
            listOfUsers.addItem(simUser[i]);
        }

        for (int i = 0; i < simModuleType.length; i++) {
            moduleTypeCombo.addItem(simModuleType[i]);
        }

        setLocationRelativeTo(null);
        valid.setVisible(false);
        validatType.setVisible(false);
        validatmodule.setVisible(false);
        controlModule(false);
        controlComponent(false);
        filebyte = new byte[3][];
        fileout = new File[3];
        outfile = new FileOutputStream[3];

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTab = new javax.swing.JTabbedPane();
        panel1 = new javax.swing.JPanel();
        listOfUsers = new javax.swing.JComboBox();
        createUser = new javax.swing.JButton();
        subPanel = new javax.swing.JPanel();
        usernameText = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        passText = new javax.swing.JTextField();
        passLabel = new javax.swing.JLabel();
        confirmPassText = new javax.swing.JTextField();
        confirmPass = new javax.swing.JLabel();
        firstText = new javax.swing.JTextField();
        firstLabel = new javax.swing.JLabel();
        lastText = new javax.swing.JTextField();
        lastLabel = new javax.swing.JLabel();
        middleText = new javax.swing.JTextField();
        middleName = new javax.swing.JLabel();
        userSave = new javax.swing.JButton();
        usereq = new javax.swing.JLabel();
        valid = new javax.swing.JLabel();
        panel2 = new javax.swing.JPanel();
        moduleTypeCombo = new javax.swing.JComboBox();
        createModuleTypeButt = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        moduleTypeNameText = new javax.swing.JTextField();
        moduleNameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        moduleTypeDesc = new javax.swing.JTextArea();
        descriptLabel = new javax.swing.JLabel();
        moduleTypeSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        validatType = new javax.swing.JLabel();
        panel3 = new javax.swing.JPanel();
        moduleCombo = new javax.swing.JComboBox();
        createModule = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        moduleNameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        moduleVersionText = new javax.swing.JTextField();
        version = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        moduleDescriptionText = new javax.swing.JTextArea();
        moduleDescriptionLabel = new javax.swing.JLabel();
        saveModule = new javax.swing.JButton();
        validatmodule = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        panel4 = new javax.swing.JPanel();
        componentCombo = new javax.swing.JComboBox();
        createComponentButt = new javax.swing.JButton();
        componentPanel = new javax.swing.JPanel();
        componentNameText = new javax.swing.JTextField();
        componentName = new javax.swing.JLabel();
        componentOverlay = new javax.swing.JTextField();
        overlayLabel = new javax.swing.JLabel();
        componentStarter = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        compoIcon = new javax.swing.JTextField();
        iconLabel = new javax.swing.JLabel();
        wiredframeText = new javax.swing.JTextField();
        wiredFrameLabel = new javax.swing.JLabel();
        compoDescText = new javax.swing.JTextField();
        descLabel = new javax.swing.JLabel();
        iconButt = new javax.swing.JButton();
        wireButt = new javax.swing.JButton();
        descButt = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        objText = new javax.swing.JTextField();
        threeDLabel = new javax.swing.JLabel();
        mtlText = new javax.swing.JTextField();
        mtlLabel = new javax.swing.JLabel();
        objbutt = new javax.swing.JButton();
        mtlbutt = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        compDescription = new javax.swing.JTextArea();
        descripLabel = new javax.swing.JLabel();
        componentSave = new javax.swing.JButton();
        solidImg = new javax.swing.JTextField();
        solidImgButt = new javax.swing.JButton();
        solidLabel = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();
        imgText = new javax.swing.JTextField();
        imgButt = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        checkBox = new com.karmelos.swing.CheckBoxList();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("KSimulator Administration");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        listOfUsers.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a User" }));
        listOfUsers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listOfUsersItemStateChanged(evt);
            }
        });

        createUser.setText("Create User");
        createUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserActionPerformed(evt);
            }
        });

        subPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Info", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 18))); // NOI18N

        usernameText.setToolTipText("... must start with an alphabet, can be followed by digits,alphabet or_ ");

        usernameLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        usernameLabel.setLabelFor(usernameText);
        usernameLabel.setText("Username");

        passText.setToolTipText("can be empty but must correspond with confirm password");
        passText.setMaximumSize(usernameText.getMaximumSize());
        passText.setMinimumSize(usernameText.getMinimumSize());
        passText.setPreferredSize(usernameText.getPreferredSize());

        passLabel.setFont(usernameLabel.getFont());
        passLabel.setLabelFor(passText);
        passLabel.setText("Password");

        confirmPass.setFont(usernameLabel.getFont());
        confirmPass.setLabelFor(confirmPassText);
        confirmPass.setText("Confirm Password");

        firstLabel.setFont(usernameLabel.getFont());
        firstLabel.setText("First Name");

        lastLabel.setFont(usernameLabel.getFont());
        lastLabel.setLabelFor(lastText);
        lastLabel.setText("Last Name");

        middleName.setFont(usernameLabel.getFont());
        middleName.setLabelFor(middleText);
        middleName.setText("Middle Name");

        userSave.setText("Save");
        userSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userSaveActionPerformed(evt);
            }
        });

        usereq.setForeground(new java.awt.Color(255, 0, 0));
        usereq.setText("***");

        valid.setForeground(new java.awt.Color(255, 0, 0));
        valid.setText("Invalid entry please check and try again");
        valid.setFocusable(false);

        javax.swing.GroupLayout subPanelLayout = new javax.swing.GroupLayout(subPanel);
        subPanel.setLayout(subPanelLayout);
        subPanelLayout.setHorizontalGroup(
            subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelLayout.createSequentialGroup()
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subPanelLayout.createSequentialGroup()
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(usernameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usereq)
                                .addGap(99, 99, 99)
                                .addComponent(passLabel))
                            .addGroup(subPanelLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(firstLabel)
                                .addGap(114, 114, 114)
                                .addComponent(lastLabel)
                                .addGap(77, 77, 77)
                                .addComponent(middleName)))
                        .addGap(0, 70, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userSave, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(firstText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confirmPassText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(middleText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confirmPass))))
                .addContainerGap())
            .addGroup(subPanelLayout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(valid)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        subPanelLayout.setVerticalGroup(
            subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(valid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(passLabel)
                    .addComponent(confirmPass)
                    .addComponent(usereq))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confirmPassText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(69, 69, 69)
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstLabel)
                    .addComponent(lastLabel)
                    .addComponent(middleName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(middleText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(userSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(listOfUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82)
                .addComponent(createUser, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listOfUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(subPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTab.addTab("User", panel1);

        moduleTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Module Type" }));
        moduleTypeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moduleTypeComboItemStateChanged(evt);
            }
        });

        createModuleTypeButt.setText("Create Module Type");
        createModuleTypeButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createModuleTypeButtActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Module Type Info", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 18))); // NOI18N

        moduleTypeNameText.setToolTipText("...must begin with aphabets,then alphanumerics,space or _");

        moduleNameLabel.setFont(usernameLabel.getFont());
        moduleNameLabel.setLabelFor(moduleTypeCombo);
        moduleNameLabel.setText("Name");

        moduleTypeDesc.setColumns(20);
        moduleTypeDesc.setRows(5);
        jScrollPane1.setViewportView(moduleTypeDesc);

        descriptLabel.setFont(usernameLabel.getFont());
        descriptLabel.setText("Description");

        moduleTypeSave.setText("Save");
        moduleTypeSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleTypeSaveActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("***");

        validatType.setForeground(new java.awt.Color(255, 0, 0));
        validatType.setText("The module Type name is invalid  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptLabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(moduleTypeSave, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(moduleNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(validatType))
                            .addComponent(jScrollPane1)
                            .addComponent(moduleTypeNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moduleNameLabel)
                    .addComponent(jLabel4)
                    .addComponent(validatType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(moduleTypeNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(descriptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(moduleTypeSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addComponent(moduleTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126)
                        .addComponent(createModuleTypeButt, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 50, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moduleTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createModuleTypeButt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        mainTab.addTab("Module Type", panel2);

        panel3.setAutoscrolls(true);
        panel3.setEnabled(false);

        moduleCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Module" }));
        moduleCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                moduleComboItemStateChanged(evt);
            }
        });

        createModule.setText("Create Module");
        createModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createModuleActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Module Info", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 18))); // NOI18N

        moduleNameText.setToolTipText("must begin with alphabets,can be followed by alphanumerics,spaces or _");

        jLabel1.setFont(usernameLabel.getFont());
        jLabel1.setLabelFor(moduleNameText);
        jLabel1.setText("Name");

        moduleVersionText.setToolTipText("must begin with a digit,can be followed by \".\" digits");

        version.setFont(usernameLabel.getFont());
        version.setText("Version");

        moduleDescriptionText.setColumns(20);
        moduleDescriptionText.setRows(5);
        jScrollPane2.setViewportView(moduleDescriptionText);

        moduleDescriptionLabel.setFont(usernameLabel.getFont());
        moduleDescriptionLabel.setLabelFor(moduleDescriptionText);
        moduleDescriptionLabel.setText("Description");

        saveModule.setText("Save");
        saveModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModuleActionPerformed(evt);
            }
        });

        validatmodule.setForeground(new java.awt.Color(255, 0, 0));
        validatmodule.setText("One of your entries contains invalid characters");

        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("***");

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("***");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(moduleDescriptionLabel)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(version)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel5))
                                .addComponent(moduleNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                                .addComponent(moduleVersionText)
                                .addComponent(jScrollPane2))
                            .addComponent(saveModule, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(validatmodule)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(validatmodule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moduleNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(version)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(moduleVersionText, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(moduleDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(saveModule, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(moduleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(createModule, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 58, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moduleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createModule, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        mainTab.addTab("Module", panel3);

        panel4.setEnabled(false);

        componentCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Component" }));
        componentCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                componentComboItemStateChanged(evt);
            }
        });

        createComponentButt.setText("Create Component");
        createComponentButt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createComponentButtMouseClicked(evt);
            }
        });
        createComponentButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createComponentButtActionPerformed(evt);
            }
        });

        componentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Component Info", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 18))); // NOI18N

        componentNameText.setToolTipText("must begin with alphabets, can be followed by alphanumerics,spaces or _");
        componentNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentNameTextActionPerformed(evt);
            }
        });

        componentName.setFont(usernameLabel.getFont());
        componentName.setText("Name");

        componentOverlay.setToolTipText(" if present, only a single digit");

        overlayLabel.setFont(usernameLabel.getFont());
        overlayLabel.setText("Overlay Order");

        componentStarter.setFont(usernameLabel.getFont());
        componentStarter.setText("Starter");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        compoIcon.setEditable(false);

        iconLabel.setFont(usernameLabel.getFont());
        iconLabel.setText("Icon Image");

        wiredframeText.setEditable(false);
        wiredframeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wiredframeTextActionPerformed(evt);
            }
        });

        wiredFrameLabel.setFont(usernameLabel.getFont());
        wiredFrameLabel.setText("Wiredframe Image");

        compoDescText.setEditable(false);

        descLabel.setFont(usernameLabel.getFont());
        descLabel.setText("Description Image");

        iconButt.setText("File");
        iconButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconButtActionPerformed(evt);
            }
        });

        wireButt.setText("File");
        wireButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wireButtActionPerformed(evt);
            }
        });

        descButt.setText("File");
        descButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descButtActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        objText.setEditable(false);

        threeDLabel.setFont(usernameLabel.getFont());
        threeDLabel.setText("3-D OBJ File");

        mtlText.setEditable(false);

        mtlLabel.setFont(usernameLabel.getFont());
        mtlLabel.setText("3-D MTL File");

        objbutt.setText("File");
        objbutt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objbuttActionPerformed(evt);
            }
        });

        mtlbutt.setText("File");
        mtlbutt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mtlbuttActionPerformed(evt);
            }
        });

        compDescription.setColumns(20);
        compDescription.setRows(5);
        jScrollPane3.setViewportView(compDescription);

        descripLabel.setFont(usernameLabel.getFont());
        descripLabel.setText("Description");

        componentSave.setText("Save");
        componentSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentSaveActionPerformed(evt);
            }
        });

        solidImg.setEditable(false);

        solidImgButt.setText("File");
        solidImgButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solidImgButtActionPerformed(evt);
            }
        });

        solidLabel.setFont(usernameLabel.getFont());
        solidLabel.setText("Solid Image");

        imgLabel.setFont(usernameLabel.getFont());
        imgLabel.setText("Image File");

        imgText.setEditable(false);

        imgButt.setText("File");
        imgButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgButtActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("***");

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("***");

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("***");

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("***");

        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("***");

        checkBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(checkBox);

        javax.swing.GroupLayout componentPanelLayout = new javax.swing.GroupLayout(componentPanel);
        componentPanel.setLayout(componentPanelLayout);
        componentPanelLayout.setHorizontalGroup(
            componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(componentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(componentPanelLayout.createSequentialGroup()
                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(componentPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(componentStarter)
                                    .addGroup(componentPanelLayout.createSequentialGroup()
                                        .addComponent(componentName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9))
                                    .addComponent(componentOverlay, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                    .addComponent(overlayLabel)
                                    .addComponent(componentNameText)))
                            .addComponent(descripLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(componentPanelLayout.createSequentialGroup()
                                .addComponent(iconLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))
                            .addComponent(wiredFrameLabel)
                            .addComponent(compoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(solidImg, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(compoDescText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                .addComponent(wiredframeText, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(componentPanelLayout.createSequentialGroup()
                                .addComponent(solidLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13))
                            .addComponent(descLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(iconButt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(wireButt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(descButt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(solidImgButt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel12))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(componentPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(threeDLabel))
                    .addGroup(componentPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(componentPanelLayout.createSequentialGroup()
                                .addComponent(imgText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(imgButt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(componentPanelLayout.createSequentialGroup()
                                    .addComponent(mtlText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(mtlbutt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(componentPanelLayout.createSequentialGroup()
                                    .addComponent(objText, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(objbutt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(componentPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mtlLabel)
                            .addComponent(imgLabel)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(componentSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        componentPanelLayout.setVerticalGroup(
            componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(componentPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(threeDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objbutt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mtlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mtlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mtlbutt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgLabel)
                .addGap(9, 9, 9)
                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgButt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addGap(18, 18, 18)
                .addComponent(componentSave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
            .addGroup(componentPanelLayout.createSequentialGroup()
                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(componentPanelLayout.createSequentialGroup()
                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(componentPanelLayout.createSequentialGroup()
                                .addGap(276, 276, 276)
                                .addComponent(descripLabel))
                            .addGroup(componentPanelLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(componentName)
                                    .addComponent(iconLabel)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(componentPanelLayout.createSequentialGroup()
                                        .addComponent(componentNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(overlayLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(componentOverlay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(componentStarter))
                                    .addGroup(componentPanelLayout.createSequentialGroup()
                                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(compoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(iconButt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(13, 13, 13)
                                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(wiredFrameLabel)
                                            .addComponent(jLabel11))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(wiredframeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(wireButt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(16, 16, 16)
                                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(descLabel)
                                            .addComponent(jLabel12))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(compoDescText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(descButt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(solidLabel)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(componentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(solidImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(solidImgButt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSeparator1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(componentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(createComponentButt, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
            .addGroup(panel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(componentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(componentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createComponentButt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(componentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainTab.addTab("Component", panel4);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainTab, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void clearUser() {
//        listOfUsers.setSelectedIndex(0);
        usernameText.setText("");
        passText.setText("");
        confirmPassText.setText("");
        firstText.setText("");
        lastText.setText("");
        middleText.setText("");
    }

    private void clearModuleType() {
//        moduleTypeCombo.setSelectedIndex(0);
        moduleTypeNameText.setText("");
        moduleTypeDesc.setText("");

    }

    private void clearModule() {
//        moduleCombo.setSelectedIndex(0);
        moduleNameText.setText("");
        moduleVersionText.setText("");
        moduleDescriptionText.setText("");
    }

    private void clearComponent() {
//        componentCombo.setSelectedIndex(0);
        listModel.removeAllElements();
        Component[] comps = componentPanel.getComponents();
        for (Component comp : comps) {
            if (comp instanceof JTextField) {
                ((JTextField) comp).setText("");
            }

//        if(comp instanceof JTextArea){
//        ((JTextArea)comp).setText("");
//        }
            if (comp instanceof JCheckBox) {
                ((JCheckBox) comp).setSelected(false);
            }
        }
        compDescription.setText("");
//        checkBox.removeAll();
//        componentNameText.setText("");
//        componentOverlay.setText("");
//        componentStarter.setSelected(false);
//        compoIcon.setText("");
//        wiredframeText.setText("");
//        compDescription.setText("");
//        objText.setText("");
//        mtlText.setText("");
//        solidImg.setText("");

    }
    private void componentNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_componentNameTextActionPerformed

    private void wiredframeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wiredframeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wiredframeTextActionPerformed

    private void createUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserActionPerformed
        if (evt.getActionCommand().equals("Create User")) {
            createUser.setText("Cancel Create");
            clearUserMethod();
            isSave = true;
        } else if (evt.getActionCommand().equals("Cancel Create")) {
            createUser.setText("Create User");
            listOfUsers.setEnabled(true);
            valid.setVisible(false);
            clearUser();
            isSave = false;
        }
    }//GEN-LAST:event_createUserActionPerformed

    private void createModuleTypeButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createModuleTypeButtActionPerformed
        if (evt.getActionCommand().equals("Create Module Type")) {
            createModuleTypeButt.setText("Cancel Create");
            clearModuleTypeMethod();
            isSave = true;
            controlModule(false);
        } else if (evt.getActionCommand().equals("Cancel Create")) {
            createModuleTypeButt.setText("Create Module Type");
            moduleTypeCombo.setEnabled(true);
            validatType.setVisible(false);
            clearModuleType();
            isSave = false;
            controlModule(true);
        }
    }//GEN-LAST:event_createModuleTypeButtActionPerformed

    private void createModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createModuleActionPerformed
//        moduleCombo.setSelectedIndex(0);
//        clearModule();
        if (evt.getActionCommand().equals("Create Module")) {
            createModule.setText("Cancel Create");
            clearModuleMethod();
            controlComponent(false);
            isSave = true;
        } else if (evt.getActionCommand().equals("Cancel Create")) {
            createModule.setText("Create Module");
            moduleCombo.setEnabled(true);
            clearModule();
            isSave = false;
            controlComponent(true);

        }
    }//GEN-LAST:event_createModuleActionPerformed

    private void listOfUsersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listOfUsersItemStateChanged
        SimUser selectedUser = null;
        if (listOfUsers.getSelectedIndex() > 0) {
            selectedUser = (SimUser) listOfUsers.getSelectedItem();
            fillUser(selectedUser);
        } else {
            clearUser();
        }
    }//GEN-LAST:event_listOfUsersItemStateChanged

    private void moduleComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moduleComboItemStateChanged
        SimModule selectedModule = null;
        if (moduleCombo.getSelectedIndex() > 0) {
            selectedModule = (SimModule) moduleCombo.getSelectedItem();
            fillModule(selectedModule);

            List<SimComponent> simcomponentList = selectedModule.getComponents();
            componentCombo.removeAllItems();
            componentCombo.addItem("Select Component");
            if (simcomponentList != null) {
                for (SimComponent simcomponent : simcomponentList) {
                    componentCombo.addItem(simcomponent);
                }

                controlComponent(true);
            }
//            else{
//            clearModule();
//            }
        } else {
            clearModule();
            controlComponent(false);
        }
    }//GEN-LAST:event_moduleComboItemStateChanged

    private void moduleTypeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_moduleTypeComboItemStateChanged
        SimModuleType selectedType = null;
        if (moduleTypeCombo.getSelectedIndex() > 0) {
            selectedType = (SimModuleType) moduleTypeCombo.getSelectedItem();
            fillModuleType(selectedType);
            moduleCombo.removeAllItems();
            SimModule[] modules = adminController.fetchModules((long) selectedType.getId());
            moduleCombo.addItem("Select Module");
            if (modules != null) {
                for (int i = 0; i < modules.length; i++) {
                    moduleCombo.addItem(modules[i]);
                }
            }
            controlModule(true);
            controlComponent(false);
        } else {
            clearModuleType();
            controlModule(false);
        }

    }//GEN-LAST:event_moduleTypeComboItemStateChanged

    private void componentComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_componentComboItemStateChanged
        if (componentCombo.getSelectedIndex() > 0) {
            SimComponent component = null;
            component = (SimComponent) componentCombo.getSelectedItem();
            fillComponent(component);

//            List<SimComponent> listCom = ((SimModule)moduleCombo.getSelectedItem()).getComponents();
            List<SimComponent> listCom = new ArrayList();
            for (int i = 0; i < componentCombo.getItemCount(); i++) {
                if (i > 0) {
                    listCom.add((SimComponent) componentCombo.getModel().getElementAt(i));
                }
            }
            listCom.remove((component));
            listModel = new DefaultListModel();
            for (SimComponent simcom : listCom) {
                listModel.addElement(simcom);
            }
            checkBox.setModel(listModel);

//          checkBox.setCheckBoxListSelectionModel(new CheckBoxListSelectionModel().addSelectionInterval(WIDTH, WIDTH));
            Set<SimComponent> set = new HashSet();
            set = component.getSuccessors();
            int[] checked = new int[set.size()];
            Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, set.size());
            for (int i = 0; i < listCom.size(); i++) {
                if (set.contains(listCom.get(i))) {
                    checkBox.addCheckBoxListSelectedValue(listCom.get(i), true);
                }
            }
//            checkBox.updateUI();
        } else {
//        listModel.removeAllElements();
            clearComponent();
        }
    }//GEN-LAST:event_componentComboItemStateChanged

    private void userSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userSaveActionPerformed
        makeUser();
    }//GEN-LAST:event_userSaveActionPerformed

    private void moduleTypeSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleTypeSaveActionPerformed
        makeModuleType();
    }//GEN-LAST:event_moduleTypeSaveActionPerformed

    private void saveModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModuleActionPerformed
        makeModule();
    }//GEN-LAST:event_saveModuleActionPerformed
    private void iconButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconButtActionPerformed
        uploadRaw(evt);
    }//GEN-LAST:event_iconButtActionPerformed

    private void wireButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wireButtActionPerformed
        uploadRaw(evt);
    }//GEN-LAST:event_wireButtActionPerformed

    private void descButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descButtActionPerformed
        uploadRaw(evt);
    }//GEN-LAST:event_descButtActionPerformed

    private void solidImgButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solidImgButtActionPerformed
        uploadRaw(evt);
    }//GEN-LAST:event_solidImgButtActionPerformed

    private void objbuttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objbuttActionPerformed
        addObj();
    }//GEN-LAST:event_objbuttActionPerformed

    private void mtlbuttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mtlbuttActionPerformed
        addMtl();
    }//GEN-LAST:event_mtlbuttActionPerformed

    private void imgButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgButtActionPerformed
        addImg();
    }//GEN-LAST:event_imgButtActionPerformed

    private void createComponentButtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createComponentButtMouseClicked
//        if (createComponentButt.getActionCommand().equals("Cancel Create")) {
//            validateComponent();
//        }
    }//GEN-LAST:event_createComponentButtMouseClicked

    private void componentSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentSaveActionPerformed
//        validateComponent();
        makeComponent();
    }//GEN-LAST:event_componentSaveActionPerformed

    private void createComponentButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createComponentButtActionPerformed
        if (evt.getActionCommand().equals("Create Component")) {
            createComponentButt.setText("Cancel Create");
            clearComponentMethod();
//            controlComponent(false);
            isSave = true;
        } else if (evt.getActionCommand().equals("Cancel Create")) {
            createComponentButt.setText("Create Component");
            componentCombo.setEnabled(true);
            clearModule();
            isSave = false;
            controlComponent(true);

        }
    }//GEN-LAST:event_createComponentButtActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        OkCancelOption okcancel = new OkCancelOption(this, "KSimulator");
        okcancel.setLabel1("Please make sure you save all changes. Do you still want to exit?");
        okcancel.setSize(400, 150);
        boolean response = okcancel.showDialog();
        if (response) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void fillUser(SimUser user) {
        usernameText.setText(user.getUsername());
//        passText.setText(user.getPassword());
//        confirmPassText.setText(user.getPassword());
        firstText.setText(user.getFirstName());
        lastText.setText(user.getLastName());
        middleText.setText(user.getMiddleName());
    }

    private void fillModuleType(SimModuleType moduleType) {
        moduleTypeNameText.setText(moduleType.getTypeName());
        moduleTypeDesc.setText(moduleType.getDescription());
    }

    private void fillModule(SimModule module) {
        if (module != null) {
            moduleNameText.setText(module.getModelName());
            moduleVersionText.setText(module.getVersionName());
            moduleDescriptionText.setText(module.getDescription());
        } else {
            moduleNameText.setText("");
            moduleVersionText.setText("");
            moduleDescriptionText.setText("");
        }
    }

    private void fillComponent(SimComponent component) {
        if (componentCombo.getSelectedIndex() > 0) {
            componentNameText.setText(component.getComponentName());
            componentOverlay.setText(new Integer(component.getOverlayOrder()).toString());
            compDescription.setText(component.getDescription());
            componentStarter.setSelected(component.isStarter());
            File file = new File("KSim3DResource" + "\\obj_" + component.getId() + ".obj");
            objText.setText(file.getPath());
            file = new File("KSim3DResource" + "\\mat_" + component.getId() + ".mtl");
            mtlText.setText(file.getPath());
            file = new File("KSim3DResource" + "\\img_front" + component.getId() + ".jpg");
            imgText.setText(file.getPath());
        } else {
            clearComponent();
        }

    }

    private void clearUserMethod() {
        listOfUsers.setSelectedIndex(0);
        listOfUsers.setEnabled(false);
        clearUser();
    }

    private void clearModuleTypeMethod() {
        moduleTypeCombo.setSelectedIndex(0);
        moduleTypeCombo.setEnabled(false);
        clearModuleType();
        clearModuleMethod();
    }

    private void clearModuleMethod() {
        moduleCombo.setSelectedIndex(0);
        moduleCombo.setEnabled(false);
        clearModule();
    }

    private void clearComponentMethod() {
        componentCombo.setSelectedIndex(0);
        componentCombo.setEnabled(false);
        clearComponent();
    }

    private void makeUser() {
        SimUser newUser = null;
        if (isSave) {
            newUser = new SimUser();
        } else {
            if (listOfUsers.getSelectedIndex() == 0) {
                OkOption ok = new OkOption(this, "Select User");
                ok.setLabel1("You must select a user to edit");
                ok.showDialog();
                return;
            }
            newUser = (SimUser) listOfUsers.getSelectedItem();
        }
        validateUser();
        if (isvalidate) {
            newUser.setFirstName(firstText.getText());
            newUser.setLastName(lastText.getText());
            newUser.setMiddleName(middleText.getText());
            if (!passText.getText().isEmpty()) {
                if (listOfUsers.isEnabled() == true) {
                    OkCancelOption okcancel = new OkCancelOption(this, "KSimulator");
                    okcancel.setLabel1("Are you sure to replace password");
                    boolean response = okcancel.showDialog();
                    if (response) {
                        newUser.setPassword(SimAdminController.passwordHasher(passText.getText()));
                    }
                }
                newUser.setPassword(SimAdminController.passwordHasher(passText.getText()));

            }
            newUser.setUsername(usernameText.getText());
            if (listOfUsers.isEnabled() == false) {
                adminController.saveObject(newUser);
                listOfUsers.addItem(newUser);
                OkOption ok = new OkOption(this, "Saved");
                ok.setLabel1("New user saved");
                ok.showDialog();
                listOfUsers.setSelectedItem(newUser);
                listOfUsers.setEnabled(true);
                createUser.setText("Create User");
                isSave = false;
            } else {
                OkCancelOption okCancel = new OkCancelOption(this, "Ksimulator");
                okCancel.setLabel1("Are you sure of these changes?");
                boolean response = okCancel.showDialog();
                if (response) {
                    adminController.mergeObject(newUser);
                    OkOption ok = new OkOption(this, "Updated");
                    ok.setLabel1("User updated");
                    ok.showDialog();
                }
            }
        } 
//        else {
//            newUser = null;
//            valid.setVisible(true);
//            usernameLabel.setForeground(Color.red);
//        }
    }

    private void validateUser() {
        valid.setVisible(false);
        usernameLabel.setForeground(Color.black);
        passLabel.setForeground(Color.black);
        
        isvalidate = true;
        valid.setVisible(false);
        if (!usernameText.getText().matches("[a-zA-Z]+[_0-9a-zA-Z]*")) {
            usernameLabel.setForeground(Color.red);
            valid.setVisible(true);
            isvalidate = false;
        }
//        if (passText.getText().toString().matches("[a-zA-Z0-9_]")) {
//            isvalidate = true;
//        }
        if (!passText.getText().isEmpty() && !passText.equals("")) {
            if (!passText.getText().equals(confirmPassText.getText())) {
                passLabel.setForeground(Color.red);
                valid.setVisible(true);
                isvalidate = false;
            }
        }
    }

    private void validateModuleType() {
        moduleNameLabel.setForeground(Color.black);
        validatType.setVisible(false);
        isvalidate = true;
        if (!moduleTypeNameText.getText().matches("[a-zA-Z]+[\\s_0-9a-zA-Z]*")) {
//            "[a-zA-Z]+[0-9]*\\s*"
            isvalidate = false;
            validatType.setVisible(true);
            moduleNameLabel.setForeground(Color.red);
            validatType.setVisible(true);
        }
    }

    private void makeModuleType() {
        SimModuleType newModuleType = null;
        if (isSave) {
            newModuleType = new SimModuleType();
        } else {
            if (moduleTypeCombo.getSelectedIndex() == 0) {
                OkOption okop = new OkOption(this, "You must select a Module Type");
                okop.setLabel1("You must select a Module Type");
                okop.showDialog();
                return;
            }
            newModuleType = (SimModuleType) moduleTypeCombo.getSelectedItem();
        }
        validateModuleType();
        if (isvalidate) {
            newModuleType.setTypeName(moduleTypeNameText.getText());
            newModuleType.setDescription(moduleTypeDesc.getText());
            if (moduleTypeCombo.isEnabled() == false) {
                adminController.saveObject(newModuleType);
                moduleTypeCombo.addItem(newModuleType);
                moduleTypeCombo.setSelectedItem(newModuleType);
                OkOption ok = new OkOption(this, "Saved");
                ok.setLabel1("Module-Type saved");
                ok.showDialog();
                moduleTypeCombo.setEnabled(true);
                createModuleTypeButt.setText("Create Module Type");
                isSave = false;

            } else {
                OkCancelOption okCancelOption = new OkCancelOption(this, "KSimulator");
                okCancelOption.setLabel1("Are you sure of these changes?");
                boolean response = okCancelOption.showDialog();
                if (response) {
                    adminController.mergeObject(newModuleType);
                    OkOption ok = new OkOption(this, "Updated");
                    ok.setLabel1("Module-Type updated");
                    ok.showDialog();
                }
            }
        } else {
            newModuleType = null;
        }
    }

    private void validateModule() {
        validatmodule.setVisible(false);
        version.setForeground(Color.black);
        jLabel1.setForeground(Color.black);
        isvalidate = true;
        if (moduleTypeCombo.getSelectedIndex() <= 0) {
            isvalidate = false;
            validatmodule.setText("You have not selected a module Type");
            validatmodule.setVisible(true);
            return;
        }
        if (!moduleNameText.getText().matches("[a-zA-Z]+[\\s_0-9a-zA-Z]*") || !moduleVersionText.getText().matches("[\\d]+[\\.]*")) {
            isvalidate = false;
            validatmodule.setText("One of your entries contains invalid characters");
            if (!moduleNameText.getText().matches("[a-zA-Z]+[\\s_0-9a-zA-Z]*")) {
                jLabel1.setForeground(Color.red);
            }
            if (!moduleVersionText.getText().matches("[\\d]+\\.\\d")) {
                version.setForeground(Color.red);
            }
            validatmodule.setVisible(true);
        }
    }

    private void makeModule() {
        SimModule newModule = null;
        if (isSave) {

            newModule = new SimModule();
        } else {
            if (moduleCombo.getSelectedIndex() == 0) {
                OkOption option = new OkOption(this, "You must select a module to edit");
                option.setLabel1("You must select a module to edit");
                option.showDialog();
                return;
            }
            newModule = (SimModule) moduleCombo.getSelectedItem();
        }

        validateModule();
        if (isvalidate) {
            Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, "validated");
            newModule.setModelName(moduleNameText.getText());
            newModule.setVersionName(moduleVersionText.getText());
            newModule.setDescription(moduleDescriptionText.getText());
            newModule.setModuleType((SimModuleType) moduleTypeCombo.getSelectedItem());
            if (moduleCombo.isEnabled() == false) {
                adminController.saveObject(newModule);
                moduleCombo.addItem(newModule);
                OkOption ok = new OkOption(this, "Saved");
                ok.setLabel1("New module saved");
                moduleCombo.setSelectedItem(newModule);
                moduleCombo.setEnabled(true);
                isSave = false;
            } else {
                OkCancelOption ok = new OkCancelOption(this, "KSimulator");
                ok.setLabel1("Are you sure of these changes?");
                boolean response = ok.showDialog();
                if (response) {
                    adminController.mergeObject(newModule);
                    Logger.getLogger(AdminView.class.getName()).log(Level.SEVERE, null, "merged");
                }
            }

        }
    }

    private void makeComponent() {
        SimComponent newComponent = null;
        if (isSave) {
            newComponent = new SimComponent();
        } else {
            if (componentCombo.getSelectedIndex() == 0) {
                OkOption ok = new OkOption(this, "Select a component");
                ok.setLabel1("You must select a component to edit");
                ok.showDialog();
                return;
            }
            newComponent = (SimComponent) componentCombo.getSelectedItem();
        }
        validateComponent();
        if (isvalidate) {
            newComponent.setComponentName(componentNameText.getText());
            newComponent.setDescription(compDescription.getText());
            newComponent.setModule((SimModule) moduleCombo.getSelectedItem());
            try {
                newComponent.setOverlayOrder(Integer.parseInt(componentOverlay.getText()));
            } catch (NumberFormatException pe) {
                newComponent.setOverlayOrder(0);
            }
            newComponent.setStarter(componentStarter.isSelected());
            newComponent.setRawDescriptionimage(descByte);
            newComponent.setRawIconImage(iconByte);
            newComponent.setRawWireframeImage(wiredByte);
            newComponent.setRawSolidImage(solidByte);

            Set<SimComponent> set = new HashSet<SimComponent>();
            Object[] successor = checkBox.getCheckBoxListSelectedValues();

            for (Object obj : successor) {
                set.add((SimComponent) obj);
            }

            newComponent.setSuccessors(set);
            if (componentCombo.isEnabled() == false) {
                adminController.saveObject(newComponent);
                componentCombo.addItem(newComponent);
                OkOption ok = new OkOption(this, "Saved");
                ok.setLabel1("New Component saved");
                ok.showDialog();
                componentCombo.setSelectedItem(newComponent);
                componentCombo.setEnabled(true);
                createComponentButt.setText("Create Component");
                isSave = false;
            } else {

                adminController.mergeObject(newComponent);
                OkOption ok = new OkOption(this, "Updated");
                ok.setLabel1("Component Updated");
                ok.showDialog();
            }
        }
    }

    private void controlModule(boolean control) {
//        mainTab.getTabComponentAt(2).setEnabled(control);
        Component[] component = panel3.getComponents();
        for (Component comp : component) {
            if (comp instanceof JComboBox) {
                ((JComboBox) comp).setSelectedIndex(0);
            }
            comp.setEnabled(control);
        }
//        moduleCombo.setSelectedIndex(0);
//        moduleCombo.setEnabled(control);
//        createModule.setEnabled(control);
//        saveModule.setEnabled(control);
        controlComponent(control);

        Component[] component2 = jPanel2.getComponents();
        for (Component comp : component2) {
            comp.setEnabled(control);
        }
        mainTab.setEnabledAt(2, control);
        mainTab.setEnabledAt(3, control);
    }

    private void controlComponent(boolean control) {
        componentCombo.setSelectedIndex(0);
        mainTab.setEnabledAt(3, control);
    }

    private void uploadRaw(ActionEvent event) {
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Choose Your File");
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //select  the file 
        int returnval = filechooser.showOpenDialog(this);
        if (returnval == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            BufferedImage bi;
            try {   //display the image in jlabel
                bi = ImageIO.read(file);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bi, "png", baos);
                if (event.getSource().equals(iconButt)) {
                    iconByte = baos.toByteArray();
                } else if (event.getSource().equals(wireButt)) {
                    wiredByte = baos.toByteArray();
                } else if (event.getSource().equals(solidImgButt)) {
                    solidByte = baos.toByteArray();
                } else {
                    descByte = baos.toByteArray();
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error loading image! Pls try again");
            } finally {

            }
            this.pack();
        }
    }

    private void addObj() {
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Choose an image file");
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int dia = filechooser.showOpenDialog(this);
        if (dia == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            if (!file.getName().endsWith(".obj")) {
                OkOption ok = new OkOption(this, "Wrong Selection");
                ok.setLabel1("Wrong file type selected. Please select an obj file");
                ok.showDialog();
            } else {
                objText.setText(file.getName());
                fileout[2] = new File("KSim3DResource/" + file.getName());
                filebyte[2] = new byte[(int) file.length()];

                try {
                    FileInputStream fis = new FileInputStream(file);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    bis.read(filebyte[2], 0, filebyte[2].length);
                    bis.close();

//                    outfile[2] = new FileOutputStream(fileout[2]);
                } catch (Exception e) {
                }
            }
        }
    }

    private void addMtl() {
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Choose a .mtl file");
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int dia = filechooser.showOpenDialog(this);
        if (dia == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            if (!file.getName().endsWith(".mtl")) {
                OkOption ok = new OkOption(this, "Wrong Selection");
                ok.setLabel1("Wrong file type selected. Please select a mtl file");
                ok.showDialog();
            } else {
                mtlText.setText(file.getName());
                fileout[1] = new File("KSim3DResource/" + file.getName());
                filebyte[1] = new byte[(int) file.length()];
                try {

                    FileInputStream fis = new FileInputStream(file);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    bis.read(filebyte[1], 0, filebyte[1].length);
                    bis.close();

//                    outfile[1] = new FileOutputStream(fileout[1]);
                } catch (Exception e) {
                }

            }
        }
    }

    private void addImg() {
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Choose an image file");
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int dia = filechooser.showOpenDialog(this);
        if (dia == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            if (!file.getName().endsWith(".JPG")) {
                OkOption ok = new OkOption(this, "Wrong Selection");
                ok.setLabel1("Wrong file type selected. Please select a jpg file");
                ok.showDialog();
            } else {
                imgText.setText(file.getName());
                fileout[2] = new File("KSim3DResource/" + file.getName());
                filebyte[2] = new byte[(int) file.length()];

                try {
                    FileInputStream fis = new FileInputStream(file);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    bis.read(filebyte[2], 0, filebyte[2].length);
                    bis.close();

//                    outfile[2] = new FileOutputStream(fileout[2]);
                } catch (Exception e) {
                }
            }
        }
    }

    private void validateComponent() {
        componentName.setForeground(Color.black);
        iconLabel.setForeground(Color.black);
        wiredFrameLabel.setForeground(Color.black);
        descLabel.setForeground(Color.black);
        solidLabel.setForeground(Color.black);
        threeDLabel.setForeground(Color.black);
        mtlLabel.setForeground(Color.black);
        imgLabel.setForeground(Color.black);
        overlayLabel.setForeground(Color.black);
        isvalidate = true;
        if (!componentNameText.getText().matches("[a-zA-Z]+[\\s_0-9a-zA-Z]*")) {
            isvalidate = false;
            componentName.setForeground(Color.red);
            return;
        }
        if(!componentOverlay.getText().matches("\\d{1}")){
        isvalidate = false;
        overlayLabel.setForeground(Color.red);
        return;
        }
        
        if (componentCombo.isEnabled() == false) {
            while (compoIcon.getText().isEmpty()) {
                isvalidate = false;
                iconLabel.setForeground(Color.red);
                return;
            }
            if (wiredframeText.getText().isEmpty()) {
                isvalidate = false;
                wiredFrameLabel.setForeground(Color.red);
                return;
            }
            if (compoDescText.getText().isEmpty()) {
                isvalidate = false;
                descLabel.setForeground(Color.red);
                return;
            }
            if (solidImg.getText().isEmpty()) {
                isvalidate = false;
                solidLabel.setForeground(Color.red);
                return;
            } else {
                if (((SimComponent) componentCombo.getSelectedItem()).getRawIconImage() == null) {
                    isvalidate = false;
                    iconLabel.setForeground(Color.red);
                    return;
                }
                if (((SimComponent) componentCombo.getSelectedItem()).getRawWireframeImage() == null) {
                    isvalidate = false;
                    wiredFrameLabel.setForeground(Color.red);
                    return;
                }
                if (((SimComponent) componentCombo.getSelectedItem()).getRawDescriptionimage() == null) {
                    isvalidate = false;
                    descLabel.setForeground(Color.red);
                    return;
                }

                if (((SimComponent) componentCombo.getSelectedItem()).getRawSolidImage() == null) {
                    isvalidate = true;
                    solidLabel.setForeground(Color.red);
                    return;
                }
            }

            {
                if (componentCombo.isEnabled() == false) {
                    if (objText.getText().isEmpty()) {
                        isvalidate = false;
                        threeDLabel.setForeground(Color.red);
                        return;
                    }
                    if (mtlText.getText().isEmpty()) {
                        isvalidate = false;
                        mtlLabel.setForeground(Color.red);
                    }

                    if (imgText.getText().isEmpty()) {
                        isvalidate = false;
                        imgLabel.setForeground(Color.red);
                    }
                } else {

                    File file = new File("KSim3DResource" + "\\obj_" + ((SimComponent) componentCombo.getSelectedItem()).getId() + ".obj");
                    if (!file.exists()) {
                        isvalidate = false;
                        threeDLabel.setForeground(Color.red);
                    }

                    File mtfile = new File("KSim3DResource" + "\\mat_" + ((SimComponent) componentCombo.getSelectedItem()).getId() + ".mtl");
                    if (!mtfile.exists()) {
                        isvalidate = false;
                        mtlLabel.setForeground(Color.red);
                    }
                }
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.karmelos.swing.CheckBoxList checkBox;
    private javax.swing.JTextArea compDescription;
    private javax.swing.JTextField compoDescText;
    private javax.swing.JTextField compoIcon;
    private javax.swing.JComboBox componentCombo;
    private javax.swing.JLabel componentName;
    private javax.swing.JTextField componentNameText;
    private javax.swing.JTextField componentOverlay;
    private javax.swing.JPanel componentPanel;
    private javax.swing.JButton componentSave;
    private javax.swing.JCheckBox componentStarter;
    private javax.swing.JLabel confirmPass;
    private javax.swing.JTextField confirmPassText;
    private javax.swing.JButton createComponentButt;
    private javax.swing.JButton createModule;
    private javax.swing.JButton createModuleTypeButt;
    private javax.swing.JButton createUser;
    private javax.swing.JButton descButt;
    private javax.swing.JLabel descLabel;
    private javax.swing.JLabel descripLabel;
    private javax.swing.JLabel descriptLabel;
    private javax.swing.JLabel firstLabel;
    private javax.swing.JTextField firstText;
    private javax.swing.JButton iconButt;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JButton imgButt;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JTextField imgText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lastLabel;
    private javax.swing.JTextField lastText;
    private javax.swing.JComboBox listOfUsers;
    private javax.swing.JTabbedPane mainTab;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel middleName;
    private javax.swing.JTextField middleText;
    private javax.swing.JComboBox moduleCombo;
    private javax.swing.JLabel moduleDescriptionLabel;
    private javax.swing.JTextArea moduleDescriptionText;
    private javax.swing.JLabel moduleNameLabel;
    private javax.swing.JTextField moduleNameText;
    private javax.swing.JComboBox moduleTypeCombo;
    private javax.swing.JTextArea moduleTypeDesc;
    private javax.swing.JTextField moduleTypeNameText;
    private javax.swing.JButton moduleTypeSave;
    private javax.swing.JTextField moduleVersionText;
    private javax.swing.JLabel mtlLabel;
    private javax.swing.JTextField mtlText;
    private javax.swing.JButton mtlbutt;
    private javax.swing.JTextField objText;
    private javax.swing.JButton objbutt;
    private javax.swing.JLabel overlayLabel;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JPanel panel4;
    private javax.swing.JLabel passLabel;
    private javax.swing.JTextField passText;
    private javax.swing.JButton saveModule;
    private javax.swing.JTextField solidImg;
    private javax.swing.JButton solidImgButt;
    private javax.swing.JLabel solidLabel;
    private javax.swing.JPanel subPanel;
    private javax.swing.JLabel threeDLabel;
    private javax.swing.JButton userSave;
    private javax.swing.JLabel usereq;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameText;
    private javax.swing.JLabel valid;
    private javax.swing.JLabel validatType;
    private javax.swing.JLabel validatmodule;
    private javax.swing.JLabel version;
    private javax.swing.JButton wireButt;
    private javax.swing.JLabel wiredFrameLabel;
    private javax.swing.JTextField wiredframeText;
    // End of variables declaration//GEN-END:variables
}
